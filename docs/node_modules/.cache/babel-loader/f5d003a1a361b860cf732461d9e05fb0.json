{"ast":null,"code":"var _jsxFileName = \"/Users/chocolababy/Desktop/React-todo/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const tasks = JSON.parse(localStorage.getItem('tasks'));\n\n    if (tasks) {\n      setTasks(tasks);\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n\n  function addTask(name) {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  const FILTER_MAP = {\n    Todo: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n  };\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\n  const [filter, setFilter] = useState('All');\n  const filterList = FILTER_NAMES.map(name => /*#__PURE__*/_jsxDEV(FilterButton, {\n    name: name,\n    isPressed: name === filter,\n    setFilter: setFilter\n  }, name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this));\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 7\n  }, this));\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return { ...task,\n          name: newName\n        };\n      }\n\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoapp stack-large\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"To Do List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), filterList, /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"list-heading\",\n      children: headingText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      role: \"list\",\n      className: \"todo-list stack-large stack-exception\",\n      \"aria-labelledby\": \"list-heading\",\n      children: taskList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"xmeflBAdvJGXG+Y9zRyX2WnuC2I=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/chocolababy/Desktop/React-todo/src/App.js"],"names":["React","useEffect","useState","nanoid","Todo","Form","FilterButton","App","props","tasks","setTasks","JSON","parse","localStorage","getItem","setItem","stringify","addTask","name","newTask","id","completed","toggleTaskCompleted","updatedTasks","map","task","FILTER_MAP","Active","Completed","FILTER_NAMES","Object","keys","filter","setFilter","filterList","taskList","deleteTask","editTask","tasksNoun","length","headingText","remainingTasks","newName","editedTaskList"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\n\nfunction App(props) {\n\n  const [tasks, setTasks] = useState([]);\n\n  useEffect(() => {\n    const tasks = JSON.parse(localStorage.getItem('tasks'));\n    if (tasks) {\n      setTasks(tasks);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n\n  function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return { ...task, completed: !task.completed }\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  const FILTER_MAP = {\n    Todo: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n  };\n\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\n  const [filter, setFilter] = useState('All');\n\n\n\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n\n\n  const taskList = tasks\n    .filter(FILTER_MAP[filter])\n    .map(task => (\n      <Todo\n        id={task.id}\n        name={task.name}\n        completed={task.completed}\n        key={task.id}\n        toggleTaskCompleted={toggleTaskCompleted}\n        deleteTask={deleteTask}\n        editTask={editTask}\n      />\n    ));\n\n\n\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return { ...task, name: newName }\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  return (\n    <div className=\"todoapp stack-large\" >\n      <h1>To Do List</h1>\n      <Form addTask={addTask} />\n      {filterList}\n      <h2 id=\"list-heading\">{headingText}</h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}