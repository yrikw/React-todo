{"ast":null,"code":"var _jsxFileName = \"/Users/chocolababy/Desktop/react-todo/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const [tasks, setTasks] = useState(props.tasks);\n\n  function addTask(name) {\n    const newTask = {\n      id: \"id\",\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n    localStorage.setItem(newTask);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  const FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n  };\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\n  const [filter, setFilter] = useState('All');\n  const filterList = FILTER_NAMES.map(name => /*#__PURE__*/_jsxDEV(FilterButton, {\n    name: name,\n    isPressed: name === filter,\n    setFilter: setFilter\n  }, name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this));\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 7\n  }, this));\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return { ...task,\n          name: newName\n        };\n      }\n\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoapp stack-large\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TodoMatic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), filterList, /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"list-heading\",\n      children: headingText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      role: \"list\",\n      className: \"todo-list stack-large stack-exception\",\n      \"aria-labelledby\": \"list-heading\",\n      children: taskList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"EeRnFHbkPD5i3v9CpmwzSMi80Ig=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/chocolababy/Desktop/react-todo/src/App.js"],"names":["React","useState","Todo","Form","FilterButton","nanoid","App","props","tasks","setTasks","addTask","name","newTask","id","completed","localStorage","setItem","toggleTaskCompleted","updatedTasks","map","task","FILTER_MAP","All","Active","Completed","FILTER_NAMES","Object","keys","filter","setFilter","filterList","taskList","deleteTask","editTask","tasksNoun","length","headingText","remainingTasks","newName","editedTaskList"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport { nanoid } from \"nanoid\";\n\nfunction App(props) {\n\n  const [tasks, setTasks] = useState(props.tasks);\n\n  function addTask(name) {\n    const newTask = { id: \"id\", name: name, completed: false };\n    setTasks([...tasks, newTask]);\n    localStorage.setItem(newTask);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return { ...task, completed: !task.completed }\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  const FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n  };\n\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\n  const [filter, setFilter] = useState('All');\n\n\n\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n\n\n  const taskList = tasks\n    .filter(FILTER_MAP[filter])\n    .map(task => (\n      <Todo\n        id={task.id}\n        name={task.name}\n        completed={task.completed}\n        key={task.id}\n        toggleTaskCompleted={toggleTaskCompleted}\n        deleteTask={deleteTask}\n        editTask={editTask}\n      />\n    ));\n\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return { ...task, name: newName }\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n\n  return (\n    <div className=\"todoapp stack-large\" >\n      <h1>TodoMatic</h1>\n      <Form addTask={addTask} />\n      {filterList}\n      <h2 id=\"list-heading\">{headingText}</h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}