{"ast":null,"code":"var _jsxFileName = \"/Users/chocolababy/Desktop/react-todo/src/components/Form.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Form = props => /*#__PURE__*/_jsxDEV(\"form\", {\n  className: \"App-form\",\n  onSubmit: e => {\n    // formのデフォルトのイベントをキャンセル\n    e.preventDefault(); // idがtitleのElementを取得\n\n    const titleElement = e.target.elements[\"title\"]; // idがdescriptionのElementを取得\n\n    const descriptionElement = e.target.elements[\"description\"]; // todoList stateに追加\n\n    this.setState({\n      todoList: this.state.todoList.concat({\n        title: titleElement.value,\n        description: descriptionElement.value\n      })\n    }, // stateの変更後に入力した値を空にする\n    () => {\n      titleElement.value = \"\";\n      descriptionElement.value = \"\";\n    });\n  },\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"title\",\n      placeholder: \"title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: \"description\",\n      placeholder: \"description\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 5\n}, this);\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/chocolababy/Desktop/react-todo/src/components/Form.js"],"names":["React","Component","Form","props","e","preventDefault","titleElement","target","elements","descriptionElement","setState","todoList","state","concat","title","value","description"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;;;AAEA,MAAMC,IAAI,GAAIC,KAAD,iBACT;AACI,EAAA,SAAS,EAAC,UADd;AAEI,EAAA,QAAQ,EAAEC,CAAC,IAAI;AACX;AACAA,IAAAA,CAAC,CAACC,cAAF,GAFW,CAIX;;AACA,UAAMC,YAAY,GAAGF,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkB,OAAlB,CAArB,CALW,CAMX;;AACA,UAAMC,kBAAkB,GAAGL,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkB,aAAlB,CAA3B,CAPW,CASX;;AACA,SAAKE,QAAL,CACI;AACIC,MAAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWD,QAAX,CAAoBE,MAApB,CAA2B;AACjCC,QAAAA,KAAK,EAAER,YAAY,CAACS,KADa;AAEjCC,QAAAA,WAAW,EAAEP,kBAAkB,CAACM;AAFC,OAA3B;AADd,KADJ,EAOI;AACA,UAAM;AACFT,MAAAA,YAAY,CAACS,KAAb,GAAqB,EAArB;AACAN,MAAAA,kBAAkB,CAACM,KAAnB,GAA2B,EAA3B;AACH,KAXL;AAaH,GAzBL;AAAA,0BA2BI;AAAA,4BACI;AACI,MAAA,EAAE,EAAC,OADP;AAEI,MAAA,WAAW,EAAC;AAFhB;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AACI,MAAA,EAAE,EAAC,aADP;AAEI,MAAA,WAAW,EAAC;AAFhB;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UA3BJ,eAqCI;AAAA,2BACI;AACI,MAAA,IAAI,EAAC,QADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UArCJ;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;;KAAMb,I;AAgDN,eAAeA,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst Form = (props) => (\n    <form\n        className=\"App-form\"\n        onSubmit={e => {\n            // formのデフォルトのイベントをキャンセル\n            e.preventDefault();\n\n            // idがtitleのElementを取得\n            const titleElement = e.target.elements[\"title\"]\n            // idがdescriptionのElementを取得\n            const descriptionElement = e.target.elements[\"description\"];\n\n            // todoList stateに追加\n            this.setState(\n                {\n                    todoList: this.state.todoList.concat({\n                        title: titleElement.value,\n                        description: descriptionElement.value\n                    })\n                },\n                // stateの変更後に入力した値を空にする\n                () => {\n                    titleElement.value = \"\";\n                    descriptionElement.value = \"\";\n                }\n            )\n        }}\n    >\n        <div>\n            <input\n                id=\"title\"\n                placeholder=\"title\"\n            />\n            <textarea\n                id=\"description\"\n                placeholder=\"description\"\n            />\n        </div>\n        <div>\n            <button\n                type=\"submit\"\n            >\n                Add\n      </button>\n        </div>\n    </form>\n);\n\nexport default Form;"]},"metadata":{},"sourceType":"module"}